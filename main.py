from datetime import datetime
import csv
import matplotlib.pyplot as plt

FILENAME = 'expenses.csv'

def show_menu():
    print("\n=== ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ===")
    print("1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("2. ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
    print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    print("5. ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    print("6. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")



def add_expense():
    name = input("‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ")
    amount = float(input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (+‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö, -‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢): "))
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
    
    with open(FILENAME, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([timestamp, name, amount])  # <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp
    print("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")


def view_expenses():
    print("\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---")
    try:
        with open(FILENAME, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                print(f"{row[0]} | {row[1]} : {row[2]} ‡∏ö‡∏≤‡∏ó")  # <-- ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤
    except FileNotFoundError:
        print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")


def calculate_balance():
    total = 0
    try:
        with open(FILENAME, mode='r', encoding='utf-8') as file:
            reader = csv.reader(file)
            for row in reader:
                total += float(row[2])  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å row[1] ‡πÄ‡∏õ‡πá‡∏ô row[2]
        print(f"\nüí∞ ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {total:.2f} ‡∏ö‡∏≤‡∏ó")
    except FileNotFoundError:
        print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

def delete_expense():
    try:
        with open(FILENAME, mode='r', encoding='utf-8') as file:
            reader = list(csv.reader(file))

        if not reader:
            print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏•‡∏ö")
            return

        print("\n--- ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ---")
        for idx, row in enumerate(reader):
            if len(row) >= 3:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö 3 ‡∏ä‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                print(f"{idx+1}. {row[0]} | {row[1]} : {row[2]} ‡∏ö‡∏≤‡∏ó")
            else:
                print(f"{idx+1}. üö´ ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {row}")

        to_delete = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç): ")) - 1

        if 0 <= to_delete < len(reader):
            deleted = reader.pop(to_delete)
            with open(FILENAME, mode='w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerows(reader)
            if len(deleted) >= 3:
                print(f"üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {deleted[1]} {deleted[2]} ‡∏ö‡∏≤‡∏ó")
            else:
                print(f"üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå: {deleted}")
        else:
            print("‚ùå ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    except FileNotFoundError:
        print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    except ValueError:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
def show_graph():
    try:
        with open(FILENAME, mode='r', encoding='utf-8') as file:
            reader = list(csv.reader(file))

        if not reader:
            print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")
            return

        labels = []
        values = []
        colors = []

        for row in reader:
            if len(row) >= 3:
                labels.append(row[1])  # ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                amount = float(row[2])
                values.append(amount)
                colors.append('green' if amount > 0 else 'red')

        plt.figure(figsize=(10, 5))
        plt.bar(labels, values, color=colors)
        plt.axhline(0, color='black', linewidth=0.5)
        plt.title("‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
        plt.xlabel("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        plt.ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)")
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()

    except FileNotFoundError:
        print("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

# ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
while True:
    show_menu()
    choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-6): ")
    
    if choice == '1':
        add_expense()
    elif choice == '2':
        view_expenses()
    elif choice == '3':
        calculate_balance()
    elif choice == '4':
        print("üëã ‡∏≠‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß")
        break
    elif choice == '5':
        delete_expense()
    elif choice == '6':
        show_graph()

    else:
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1-6 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
